Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37

class Solution:
    # @param version1, a string
    # @param version2, a string
    # @return an integer
    # consider case "01", "1", and case"1.0","1"
    def compareVersion(self, version1, version2):
        if version1 == version2:
            return 0
        
        list1 = version1.replace("."," ").split()
        list2 = version2.replace("."," ").split()
        
        for i in range(min(len(list1), len(list2))):
            if int(list1[i]) < int(list2[i]):
                return -1
            if int(list1[i]) > int(list2[i]):
                return 1
        
        if len(list1) > len(list2):
            for i in range(len(list2),len(list1)):         #eliminate the case 1.00.00 vs 1
                if int(list1[i]) != 0:
                    return 1
            return 0
            
        elif len(list1) < len(list2):
            for i in range(len(list1),len(list2)):         #eliminate the case 1.00.00 vs 1
                if int(list2[i]) != 0:
                    return -1
            return 0
            
        else:
            return 0
