Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param root, a tree node
    # @return a boolean
    
    def height(self, root):
        if root == None:
            return -1
        
        l = self.height(root.left)
        r = self.height(root.right)
        
        if l == "unbalanced" or r == "unbalanced" or abs(l - r) > 1:
            return "unbalanced"
        
        return 1 + max(l, r)
    
    def isBalanced(self, root):
        return self.height(root) != "unbalanced"
