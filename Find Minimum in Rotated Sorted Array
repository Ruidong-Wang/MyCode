Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.


class Solution:
    # @param num, a list of integer
    # @return an integer
    def findMin(self, num):
        
        n = len(num)
        if n == 1:
            return num[0]

        if num[0] < num[-1]:
            # take care the case min at the first position
            return num[0]
        if num[-1] < num[-2]:
            # take care the case min at the last position
            return num[-1]
        
        left = 0
        right = n - 1
        mid = (left + right) // 2
        
        while num[mid] > num[mid - 1]:
            if num[mid] > num[left]:
                left = mid
            else:
                right = mid
        
            mid = (left + right) // 2
            
        return num[mid]
