Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
    
class Solution:
    # @return a list of lists of length 3, [[val1,val2,val3]]
    
    # [0,0,0] is not a solution when there are less than three zeros in the list
    # consider the case that num = [-1,-1,-1,-1,-1,-1,...,-1,2] and [0,0,0]

    def threeSum(self, num):
        if num == []:
            return []
        
        num.sort()
        n = len(num)
        res = []
        
        if n < 3:
            return []
        
        for i in range(n - 2):
            sum = 0 - num[i]
            left = i + 1
            right = n - 1
            
            # make sure no dup
            if i > 0 and num[i] == num[i - 1]:
                continue
            
            while left < right:
                if num[left] + num[right] > sum:
                    key = num[right]
                    right -= 1
                    # make sure no dup
                    while left < right and num[right] == key:
                        right -= 1
                elif num[left] + num[right] < sum:
                    key = num[left]
                    left += 1
                    while left < right and num[left] == key:
                        left += 1
                else:
                    res.append([num[i], num[left], num[right]])
                    key = num[left]
                    left += 1
                    while left < right and num[left] == key:
                        left += 1

        return res
