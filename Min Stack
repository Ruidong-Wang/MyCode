Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

class MinStack:
    
    def __init__(self):
        self.stack = []
        self.min = []
        
    # @param x, an integer
    # @return an integer
    def push(self, x):
        if self.min == []:
            self.stack.append(x)
            self.min.append(x)
        else:
            self.stack.append(x)
            if self.min[-1] >= x:
                self.min.append(x)
        

    # @return nothing
    def pop(self):
        if self.min[-1] == self.stack[-1]:
            self.min.pop()
            self.stack.pop()
        else:
            self.stack.pop()
            
        

    # @return an integer
    def top(self):
        return self.stack[-1]
        

    # @return an integer
    def getMin(self):
        return self.min[-1]
